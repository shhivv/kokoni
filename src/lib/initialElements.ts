import { Position, MarkerType } from '@xyflow/react';

interface InternalPosition {
  x: number;
  y: number;
}

interface Measured {
  width: number;
  height: number;
}

// Use this type in edge helper functions that expect measured properties
export interface EnhancedNode {
  x: number;
  y: number;
  measured: Measured;
  internals: { positionAbsolute: InternalPosition };
}

function getNodeIntersection(
  intersectionNode: EnhancedNode,
  targetNode: EnhancedNode
): { x: number; y: number } {
  const { width: intersectionNodeWidth, height: intersectionNodeHeight } =
    intersectionNode.measured;
  const intersectionNodePosition = intersectionNode.internals.positionAbsolute;
  const targetPosition = targetNode.internals.positionAbsolute;

  const w = intersectionNodeWidth / 2;
  const h = intersectionNodeHeight / 2;

  const x2 = intersectionNodePosition.x + w;
  const y2 = intersectionNodePosition.y + h;
  const x1 = targetPosition.x + targetNode.measured.width / 2;
  const y1 = targetPosition.y + targetNode.measured.height / 2;

  const xx1 = (x1 - x2) / (2 * w) - (y1 - y2) / (2 * h);
  const yy1 = (x1 - x2) / (2 * w) + (y1 - y2) / (2 * h);
  const a = 1 / (Math.abs(xx1) + Math.abs(yy1));
  const xx3 = a * xx1;
  const yy3 = a * yy1;
  const x = w * (xx3 + yy3) + x2;
  const y = h * (-xx3 + yy3) + y2;

  return { x, y };
}

function getEdgePosition(
  node: EnhancedNode,
  intersectionPoint: { x: number; y: number }
): Position {
  const n = { ...node.internals.positionAbsolute, ...node };
  const nx = Math.round(n.x);
  const ny = Math.round(n.y);
  const px = Math.round(intersectionPoint.x);
  const py = Math.round(intersectionPoint.y);

  if (px <= nx + 1) {
    return Position.Left;
  }
  if (px >= nx + n.measured.width - 1) {
    return Position.Right;
  }
  if (py <= ny + 1) {
    return Position.Top;
  }
  if (py >= n.y + n.measured.height - 1) {
    return Position.Bottom;
  }

  return Position.Top;
}

export function getEdgeParams(
  source: EnhancedNode,
  target: EnhancedNode
): {
  sx: number;
  sy: number;
  tx: number;
  ty: number;
  sourcePos: Position;
  targetPos: Position;
} {
  const sourceIntersectionPoint = getNodeIntersection(source, target);
  const targetIntersectionPoint = getNodeIntersection(target, source);

  const sourcePos = getEdgePosition(source, sourceIntersectionPoint);
  const targetPos = getEdgePosition(target, targetIntersectionPoint);

  return {
    sx: sourceIntersectionPoint.x,
    sy: sourceIntersectionPoint.y,
    tx: targetIntersectionPoint.x,
    ty: targetIntersectionPoint.y,
    sourcePos,
    targetPos,
  };
}

// Types for nodes and edges generated by the helper function below.
export interface FlowNode {
  id: string;
  data: { label: string };
  position: { x: number; y: number };
}

export interface FlowEdge {
  id: string;
  source: string;
  target: string;
  type: string;
  markerEnd: {
    type: MarkerType;
  };
}

interface NodePosition {
  x: number;
  y: number;
}
// Keep track of the width needed for each subtree
const subtreeWidths = new Map<string, number>();

// Add at the top with other Maps
const nodePositions = new Map<string, NodePosition>();

// First pass to calculate subtree widths
function calculateSubtreeWidth(
  data: unknown,
  nodeId: string,
  level: number
): number {
  if (data === null || typeof data !== 'object') {
    return 1;
  }

  if (Array.isArray(data)) {
    const width = data.length || 1;
    subtreeWidths.set(nodeId, width);
    return width;
  }

  const entries = Object.entries(data);
  let totalWidth = 0;
  
  entries.forEach(([_, value], index) => {
    const childId = `node-${level + 1}-${index}`;
    if (value && typeof value === 'object') {
      totalWidth += calculateSubtreeWidth(value, childId, level + 1);
    } else {
      totalWidth += 1;
    }
  });

  const width = Math.max(entries.length, totalWidth);
  subtreeWidths.set(nodeId, width);
  return width;
}

function calculateNodePosition(
  index: number, 
  level: number, 
  totalNodesInLevel: number,
  options: LayoutOptions,
  nodeId: string,
  parentId: string | null
): NodePosition {
  const {
    centerX,
    centerY,
    levelHeight = 100, // Reduced vertical spacing
    nodeSpacing = 180  // Reduced horizontal spacing
  } = options;

  // Get parent position if it exists
  const parentPosition = parentId ? nodePositions.get(parentId) : null;
  const parentX = parentPosition ? parentPosition.x : centerX;
  const parentY = parentPosition ? parentPosition.y : centerY;

  // Calculate progressive Y offset based on index and level
  const progressiveYOffset = level === 0 ? 0 : 15; // Only apply Y offset after first level
  
  // Calculate position with balanced spread
  const spreadFactor = Math.max(1, Math.min(1.5, totalNodesInLevel / 3)); // Adjust spread based on number of nodes
  const offset = (nodeSpacing * (index - (totalNodesInLevel - 1) / 2)) / spreadFactor;
  const x = parentX + offset;
  
  // Add level height and smaller progressive offset
  const y = parentY + (level * levelHeight) + (index * progressiveYOffset);

  const position = { x, y };
  nodePositions.set(nodeId, position);
  return position;
}

interface LayoutOptions {
  centerX: number;
  centerY: number;
  levelRadius: number;
  levelSpacing: number;
  nodeSpacing: number;
  levelHeight: number;
}

function processJsonLevel(
  data: unknown,
  parentId: string | null,
  level: number,
  levelNodes: Map<number, number>,
  options: LayoutOptions
): { nodes: FlowNode[]; edges: FlowEdge[] } {
  const nodes: FlowNode[] = [];
  const edges: FlowEdge[] = [];

  if (data === null || typeof data !== 'object') {
    return { nodes, edges };
  }

  // Initialize level counter if not exists
  if (!levelNodes.has(level)) {
    levelNodes.set(level, 0);
  }

  if (Array.isArray(data)) {
    // For arrays, create nodes for each item
    data.forEach((item) => {
      const currentIndex = levelNodes.get(level)!;
      const nodeId = `node-${level}-${currentIndex}`;
      
      const position = calculateNodePosition(
        currentIndex,
        level,
        data.length,
        options,
        nodeId,
        parentId
      );

      nodes.push({
        id: nodeId,
        data: { label: typeof item === 'object' ? JSON.stringify(item) : String(item) },
        position,
      });

      // Only connect to the direct parent
      if (parentId) {
        edges.push({
          id: `edge-${parentId}-${nodeId}`,
          source: parentId,
          target: nodeId,
          type: 'floating',
          markerEnd: { type: MarkerType.Arrow },
        });
      }

      levelNodes.set(level, currentIndex + 1);
    });
  } else {
    // Handle objects
    const entries = Object.entries(data);
    
    entries.forEach(([key, value], index) => {
      const currentIndex = levelNodes.get(level)!;
      const nodeId = `node-${level}-${currentIndex}`;
      
      const position = calculateNodePosition(
        index,
        level,
        entries.length,
        options,
        nodeId,
        parentId
      );

      nodes.push({
        id: nodeId,
        data: { label: key },
        position,
      });

      // Connect to parent if exists
      if (parentId) {
        edges.push({
          id: `edge-${parentId}-${nodeId}`,
          source: parentId,
          target: nodeId,
          type: 'floating',
          markerEnd: { type: MarkerType.Arrow },
        });
      }

      // Process children if any
      if (value && typeof value === 'object') {
        const { nodes: childNodes, edges: childEdges } = processJsonLevel(
          value,
          nodeId,
          level + 1,
          levelNodes,
          options
        );
        nodes.push(...childNodes);
        edges.push(...childEdges);
      }

      levelNodes.set(level, currentIndex + 1);
    });
  }

  return { nodes, edges };
}

export function initialElements(
  data: Record<string, unknown>,
  options: {
    centerX?: number;
    centerY?: number;
    levelRadius?: number;
    levelSpacing?: number;
    nodeSpacing?: number;
    levelHeight?: number;
  } = {}
): { nodes: FlowNode[]; edges: FlowEdge[] } {
  subtreeWidths.clear();
  nodePositions.clear();
  
  calculateSubtreeWidth(data, 'node-0-0', 0);

  const layoutOptions: LayoutOptions = {
    centerX: options.centerX ?? window.innerWidth / 2,
    centerY: options.centerY ?? 30, // Start even higher
    levelRadius: options.levelRadius ?? 150,
    levelSpacing: options.levelSpacing ?? 80,
    nodeSpacing: options.nodeSpacing ?? 180, // Reduced default spacing
    levelHeight: options.levelHeight ?? 100, // Reduced level height
  };

  const levelNodes = new Map<number, number>();
  levelNodes.set(0, 0);
  
  return processJsonLevel(data, null, 0, levelNodes, layoutOptions);
}