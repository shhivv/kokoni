// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Node {
  id        Int     @id @default(autoincrement())
  question  String
  summary   String?
  updatedAt DateTime @updatedAt

  // Parent-child relationships
  parent    Node?   @relation("NodeHierarchy", fields: [parentId], references: [id])
  parentId  Int?
  children  Node[]  @relation("NodeHierarchy")

  // Search relationship
  search    Search  @relation(fields: [searchId], references: [id], onDelete: Cascade)
  searchId  String  @unique
}

model Report {
  id        Int     @id @default(autoincrement())
  updatedAt DateTime @updatedAt

  // Search relationship
  search    Search  @relation(fields: [searchId], references: [id], onDelete: Cascade)
  searchId  String  @unique

  // Report blocks
  blocks    ReportBlock[]
}

model ReportBlock {
  id          Int      @id @default(autoincrement())
  content     String
  order       Int      // To maintain the sequence of blocks
  includeStats Boolean  @default(false)  // Whether to include statistics
  includeImage Boolean  @default(false)  // Whether to include an image
  updatedAt   DateTime @updatedAt

  // Report relationship
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId    Int
}

model Search {
  id        String   @id @default(cuid())
  query      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User     @relation(fields: [createdById], references: [id])
  createdById String

  // Root node relationship
  rootNode  Node?
  Report    Report?

  @@index([query])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  searches      Search[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
